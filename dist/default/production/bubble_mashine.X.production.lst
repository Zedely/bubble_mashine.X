

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu Oct  8 21:09:07 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	10F202
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=ENTRY,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	jmp_tab,global,class=ENTRY,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x1C,4
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 29/04/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC10F202 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0001                     _TMR0	set	1
    56  0000                     _OPTION	set	0
    57  0006                     _TRIS	set	6
    58  0031                     _GP1	set	49
    59  0030                     _GP0	set	48
    60  0032                     _GP2	set	50
    61                           
    62                           	psect	cinit
    63  001                     start_initialization:	
    64                           ; #config settings
    65                           
    66  001                     __initialization:
    67  001                     end_of_initialization:	
    68                           ;End of C runtime variable initialization code
    69                           
    70  001                     __end_of__initialization:
    71  001  0064               	clrf	4
    72  002  0BCD               	ljmp	_main	;jump to C main() function
    73                           
    74                           	psect	cstackCOMMON
    75  000                     __pcstackCOMMON:
    76  000                     ??_init:
    77  000                     ??_move:	
    78                           ; 1 bytes @ 0x0
    79                           
    80  000                     ??_main:	
    81                           ; 1 bytes @ 0x0
    82                           
    83                           
    84                           	psect	cstackBANK0
    85  008                     __pcstackBANK0:	
    86                           ; 1 bytes @ 0x0
    87                           
    88  008                     ?_init:
    89  008                     ?_move:	
    90                           ; 1 bytes @ 0x0
    91                           
    92  008                     ?_main:	
    93                           ; 1 bytes @ 0x0
    94                           
    95  008                     move@x:	
    96                           ; 1 bytes @ 0x0
    97                           
    98                           
    99                           ; 1 bytes @ 0x0
   100  008                     	ds	1
   101  009                     move@d:
   102                           
   103                           ; 1 bytes @ 0x1
   104  009                     	ds	1
   105  00A                     move@i:
   106                           
   107                           ; 1 bytes @ 0x2
   108  00A                     	ds	1
   109  00B                     main@y:
   110                           
   111                           ; 2 bytes @ 0x3
   112  00B                     	ds	2
   113                           
   114                           	psect	maintext
   115  1CD                     __pmaintext:	
   116 ;;
   117 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   118 ;;
   119 ;; *************** function _main *****************
   120 ;; Defined at:
   121 ;;		line 169 in file "main.c"
   122 ;; Parameters:    Size  Location     Type
   123 ;;		None
   124 ;; Auto vars:     Size  Location     Type
   125 ;;  y               2    3[BANK0 ] unsigned int 
   126 ;;  i               1    0        unsigned char 
   127 ;; Return value:  Size  Location     Type
   128 ;;                  1   32[None  ] void 
   129 ;; Registers used:
   130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+1, btemp+3, pclath, cstack
   131 ;; Tracked objects:
   132 ;;		On entry : B00/0
   133 ;;		On exit  : 0/0
   134 ;;		Unchanged: 0/0
   135 ;; Data sizes:     COMMON   BANK0
   136 ;;      Params:         0       0
   137 ;;      Locals:         0       2
   138 ;;      Temps:          0       0
   139 ;;      Totals:         0       2
   140 ;;Total ram usage:        2 bytes
   141 ;; Hardware stack levels required when called:    1
   142 ;; This function calls:
   143 ;;		_init
   144 ;;		_move
   145 ;; This function is called by:
   146 ;;		Startup code after reset
   147 ;; This function uses a non-reentrant model
   148 ;;
   149                           
   150                           
   151                           ;psect for function _main
   152  1CD                     _main:
   153  1CD                     l648:	
   154                           ;incstack = 0
   155                           ; Regs used in _main: [wreg-fsr0h+status,2-btemp+1+btemp+3+pclath+cstack]
   156                           
   157                           
   158                           ;main.c: 170:     init();
   159  1CD  0904               	fcall	entry__init
   160  1CE                     l650:
   161                           
   162                           ;main.c: 172:         unsigned char i;;main.c: 173:         move (0x02,1);
   163  1CE  0068               	clrf	move@x
   164  1CF  02A8               	incf	move@x,f
   165  1D0  0C02               	movlw	2
   166  1D1  0903               	fcall	entry__move
   167  1D2                     l652:
   168                           
   169                           ;main.c: 174:         move(0x02,2);
   170  1D2  0C02               	movlw	2
   171  1D3  0028               	movwf	move@x
   172  1D4  0C02               	movlw	2
   173  1D5  0903               	fcall	entry__move
   174  1D6                     l654:
   175                           
   176                           ;main.c: 175:         move (0x04,2);
   177  1D6  0C02               	movlw	2
   178  1D7  0028               	movwf	move@x
   179  1D8  0C04               	movlw	4
   180  1D9  0903               	fcall	entry__move
   181  1DA                     l656:
   182                           
   183                           ;main.c: 176:         move(0x0A,1);
   184  1DA  0068               	clrf	move@x
   185  1DB  02A8               	incf	move@x,f
   186  1DC  0C0A               	movlw	10
   187  1DD  0903               	fcall	entry__move
   188  1DE                     l658:
   189                           
   190                           ;main.c: 177:        unsigned int y;;main.c: 178:     y = 0;
   191  1DE  006B               	clrf	main@y
   192  1DF  006C               	clrf	main@y+1
   193  1E0                     l660:
   194                           
   195                           ;main.c: 179:     TMR0 = 0;
   196  1E0  0061               	clrf	1	;volatile
   197                           
   198                           ;main.c: 180:     while(y < 150){
   199  1E1  0BF3               	goto	l670
   200  1E2                     l662:
   201                           
   202                           ;main.c: 181:         GP1 = 1;
   203  1E2  0526               	bsf	6,1	;volatile
   204  1E3                     l664:
   205                           
   206                           ;main.c: 183:            if(TMR0 == 0x5f){
   207  1E3  0C5F               	movlw	95
   208  1E4  0181               	xorwf	1,w	;volatile
   209  1E5  0743               	btfss	3,2
   210  1E6  0BE8               	goto	u151
   211  1E7  0BE9               	goto	u150
   212  1E8                     u151:
   213  1E8  0BF3               	goto	l670
   214  1E9                     u150:
   215  1E9                     l666:
   216                           
   217                           ;main.c: 185:                 y=y++;
   218  1E9  0061               	clrf	1	;volatile
   219  1EA                     l668:
   220  1EA  0C01               	movlw	1
   221  1EB  003C               	movwf	btemp
   222  1EC  007D               	clrf	btemp+1
   223  1ED  021C               	movf	wtemp0,w
   224  1EE  01EB               	addwf	main@y,f
   225  1EF  0603               	skipnc
   226  1F0  02AC               	incf	main@y+1,f
   227  1F1  021D               	movf	wtemp0+1,w
   228  1F2  01EC               	addwf	main@y+1,f
   229  1F3                     l670:
   230                           
   231                           ;main.c: 180:     while(y < 150){
   232  1F3  0C00               	movlw	0
   233  1F4  008C               	subwf	main@y+1,w
   234  1F5  0C96               	movlw	150
   235  1F6  0643               	skipnz
   236  1F7  008B               	subwf	main@y,w
   237  1F8  0703               	skipc
   238  1F9  0BFB               	goto	u161
   239  1FA  0BFC               	goto	u160
   240  1FB                     u161:
   241  1FB  0BE2               	goto	l662
   242  1FC                     u160:
   243  1FC                     l672:
   244                           
   245                           ;main.c: 188:         GP1 = 0;
   246  1FC  0426               	bcf	6,1	;volatile
   247  1FD  0BCE               	goto	l650
   248  1FE  0A00               	ljmp	start
   249  1FF                     __end_of_main:
   250                           
   251                           	psect	text1
   252  19B                     __ptext1:	
   253 ;; *************** function _move *****************
   254 ;; Defined at:
   255 ;;		line 67 in file "main.c"
   256 ;; Parameters:    Size  Location     Type
   257 ;;  d               1    wreg     unsigned char 
   258 ;;  x               1    0[BANK0 ] unsigned char 
   259 ;; Auto vars:     Size  Location     Type
   260 ;;  d               1    1[BANK0 ] unsigned char 
   261 ;;  i               1    2[BANK0 ] unsigned char 
   262 ;; Return value:  Size  Location     Type
   263 ;;                  1    0[BANK0 ] void 
   264 ;; Registers used:
   265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+3
   266 ;; Tracked objects:
   267 ;;		On entry : 0/0
   268 ;;		On exit  : 0/0
   269 ;;		Unchanged: 0/0
   270 ;; Data sizes:     COMMON   BANK0
   271 ;;      Params:         0       1
   272 ;;      Locals:         0       2
   273 ;;      Temps:          0       0
   274 ;;      Totals:         0       3
   275 ;;Total ram usage:        3 bytes
   276 ;; Hardware stack levels used:    1
   277 ;; This function calls:
   278 ;;		Nothing
   279 ;; This function is called by:
   280 ;;		_main
   281 ;; This function uses a non-reentrant model
   282 ;;
   283                           
   284                           
   285                           ;psect for function _move
   286  19B                     _move:
   287                           
   288                           ;move@d stored from wreg
   289  19B  0029               	movwf	move@d
   290  19C                     l622:
   291                           
   292                           ;main.c: 68:     unsigned char i;;main.c: 69:     i = 0;
   293  19C  006A               	clrf	move@i
   294                           
   295                           ;main.c: 70:     while(i < 100){
   296  19D  0BC6               	goto	l646
   297  19E                     l624:
   298                           
   299                           ;main.c: 71:            if (TMR0 == 0x00){
   300  19E  0201               	movf	1,w	;volatile
   301  19F  0743               	btfss	3,2
   302  1A0  0BA2               	goto	u91
   303  1A1  0BA3               	goto	u90
   304  1A2                     u91:
   305  1A2  0BAB               	goto	l632
   306  1A3                     u90:
   307  1A3                     l626:
   308                           
   309                           ;main.c: 72:                if (x == 1)
   310  1A3  00C8               	decf	move@x,w
   311  1A4  0743               	btfss	3,2
   312  1A5  0BA7               	goto	u101
   313  1A6  0BA8               	goto	u100
   314  1A7                     u101:
   315  1A7  0BAA               	goto	l630
   316  1A8                     u100:
   317  1A8                     l628:
   318                           
   319                           ;main.c: 73:                GP2 = 1;
   320  1A8  0546               	bsf	6,2	;volatile
   321  1A9  0BAB               	goto	l632
   322  1AA                     l630:
   323                           
   324                           ;main.c: 75:                GP0 =1;
   325  1AA  0506               	bsf	6,0	;volatile
   326  1AB                     l632:
   327                           
   328                           ;main.c: 80:             if (TMR0 == d){
   329  1AB  0209               	movf	move@d,w
   330  1AC  003F               	movwf	btemp+3
   331  1AD  0201               	movf	1,w	;volatile
   332  1AE  019F               	xorwf	btemp+3,w
   333  1AF  0743               	skipz
   334  1B0  0BB2               	goto	u111
   335  1B1  0BB3               	goto	u110
   336  1B2                     u111:
   337  1B2  0BBB               	goto	l640
   338  1B3                     u110:
   339  1B3                     l634:
   340                           
   341                           ;main.c: 81:                 if (x == 1)
   342  1B3  00C8               	decf	move@x,w
   343  1B4  0743               	btfss	3,2
   344  1B5  0BB7               	goto	u121
   345  1B6  0BB8               	goto	u120
   346  1B7                     u121:
   347  1B7  0BBA               	goto	l638
   348  1B8                     u120:
   349  1B8                     l636:
   350                           
   351                           ;main.c: 82:                 GP2 = 0;
   352  1B8  0446               	bcf	6,2	;volatile
   353  1B9  0BBB               	goto	l640
   354  1BA                     l638:
   355  1BA  0406               	bcf	6,0	;volatile
   356  1BB                     l640:
   357                           
   358                           ;main.c: 85:             if(TMR0 == 0x4C){
   359  1BB  0C4C               	movlw	76
   360  1BC  0181               	xorwf	1,w	;volatile
   361  1BD  0743               	btfss	3,2
   362  1BE  0BC0               	goto	u131
   363  1BF  0BC1               	goto	u130
   364  1C0                     u131:
   365  1C0  0BC6               	goto	l646
   366  1C1                     u130:
   367  1C1                     l642:
   368                           
   369                           ;main.c: 87:                 i=i++;
   370  1C1  0061               	clrf	1	;volatile
   371  1C2                     l644:
   372  1C2  0C01               	movlw	1
   373  1C3  003F               	movwf	btemp+3
   374  1C4  021F               	movf	btemp+3,w
   375  1C5  01EA               	addwf	move@i,f
   376  1C6                     l646:
   377                           
   378                           ;main.c: 70:     while(i < 100){
   379  1C6  0C64               	movlw	100
   380  1C7  008A               	subwf	move@i,w
   381  1C8  0703               	skipc
   382  1C9  0BCB               	goto	u141
   383  1CA  0BCC               	goto	u140
   384  1CB                     u141:
   385  1CB  0B9E               	goto	l624
   386  1CC                     u140:
   387  1CC                     l28:
   388  1CC  0800               	retlw	0
   389  1CD                     __end_of_move:
   390                           
   391                           	psect	jmp_tab
   392  003                     __pjmp_tab:	
   393                           ;incstack = 0
   394                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+btemp+3]
   395                           
   396  003                     entry__move:
   397  003  0B9B               	ljmp	_move
   398  004                     entry__init:	
   399                           ;incstack = 0
   400                           ; Regs used in _init: [wregfsr0]
   401                           
   402  004  0B93               	ljmp	_init
   403                           
   404                           	psect	text2
   405  193                     __ptext2:	
   406 ;; *************** function _init *****************
   407 ;; Defined at:
   408 ;;		line 53 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;		None
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1   14[None  ] void 
   415 ;; Registers used:
   416 ;;		wreg, fsr0l, fsr0h
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMMON   BANK0
   422 ;;      Params:         0       0
   423 ;;      Locals:         0       0
   424 ;;      Temps:          0       0
   425 ;;      Totals:         0       0
   426 ;;Total ram usage:        0 bytes
   427 ;; Hardware stack levels used:    1
   428 ;; This function calls:
   429 ;;		Nothing
   430 ;; This function is called by:
   431 ;;		_main
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435                           
   436                           ;psect for function _init
   437  193                     _init:
   438  193                     l612:
   439                           
   440                           ;main.c: 56:     TRIS = 0b00001000;
   441  193  0C08               	movlw	8
   442  194  0006               	tris	6
   443  195                     l614:
   444                           
   445                           ;main.c: 57:     GP2 = 0;
   446  195  0446               	bcf	6,2	;volatile
   447  196                     l616:
   448                           
   449                           ;main.c: 58:     GP0 = 0;
   450  196  0406               	bcf	6,0	;volatile
   451  197                     l618:
   452                           
   453                           ;main.c: 59:     GP1 = 0;
   454  197  0426               	bcf	6,1	;volatile
   455  198                     l620:
   456                           
   457                           ;main.c: 60:     OPTION = 0b11000111;
   458  198  0CC7               	movlw	199
   459  199  0002               	option
   460  19A                     l15:
   461  19A  0800               	retlw	0
   462  19B                     __end_of_init:
   463  001C                     btemp	set	28	;btemp
   464  001C                     wtemp0	set	28
   465  001E                     wtemp1	set	30
   466  001C                     ttemp0	set	28
   467  001C                     ltemp0	set	28
   468                           
   469                           	psect	config
   470                           
   471                           ;Config register CONFIG @ 0xFFF
   472                           ;	Oscillator
   473                           ;	OSC = 0x1, unprogrammed default
   474                           ;	Watchdog Timer
   475                           ;	WDTE = OFF, WDT disabled
   476                           ;	Code Protect
   477                           ;	CP = OFF, Code protection off
   478                           ;	Master Clear Enable
   479                           ;	MCLRE = OFF, GP3/MCLR pin fuction is digital I/O, MCLR internally tied to VDD
   480  0FFF                     	org	4095
   481  0FFF  FFEB               	dw	65515

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            22      5       5

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_move

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     418
                                              3 BANK0      2     2      0
                               _init
                               _move
 ---------------------------------------------------------------------------------
 (1) _move                                                 3     2      1     394
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
   _move

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               16      5       5       3       22.7%
ABS                  0      0       0       4        0.0%
BITBANK0            16      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu Oct  8 21:09:07 2020

                     l15 019A                       l28 01CC                       u90 01A3  
                     u91 01A2                       fsr 0004                      l620 0198  
                    l612 0193                      l614 0195                      l630 01AA  
                    l622 019C                      l616 0196                      l640 01BB  
                    l632 01AB                      l624 019E                      l618 0197  
                    l642 01C1                      l634 01B3                      l626 01A3  
                    l650 01CE                      l644 01C2                      l636 01B8  
                    l628 01A8                      l660 01E0                      l652 01D2  
                    l638 01BA                      l646 01C6                      l662 01E2  
                    l670 01F3                      l654 01D6                      l672 01FC  
                    l664 01E3                      l656 01DA                      l648 01CD  
                    l666 01E9                      l658 01DE                      l668 01EA  
                    _GP0 0030                      _GP1 0031                      _GP2 0032  
                    u100 01A8                      u101 01A7                      u110 01B3  
                    u111 01B2                      u120 01B8                      u121 01B7  
                    u130 01C1                      u131 01C0                      u140 01CC  
                    u141 01CB                      u150 01E9                      u151 01E8  
                    u160 01FC                      u161 01FB                     _TMR0 0001  
                   _TRIS 0006                     _main 01CD                     _init 0193  
                   _move 019B                     btemp 001C                     start 0000  
                  ?_main 0008                    ?_init 0008                    ?_move 0008  
                  main@y 000B                    ltemp0 001C                    move@d 0009  
                  move@i 000A                    move@x 0008                    ttemp0 001C  
                  status 0003                    wtemp0 001C                    wtemp1 001E  
        __initialization 0001             __end_of_main 01FF             __end_of_init 019B  
           __end_of_move 01CD                   ??_main 0000                   ??_init 0000  
                 ??_move 0000                   _OPTION 0000  __end_of__initialization 0001  
         __pcstackCOMMON 0000               __pmaintext 01CD                  __ptext1 019B  
                __ptext2 0193     end_of_initialization 0001      start_initialization 0001  
             entry__init 0004               entry__move 0003                ___latbits 0000  
          __pcstackBANK0 0008                __pjmp_tab 0003            __size_of_main 0032  
          __size_of_init 0008            __size_of_move 0032  
